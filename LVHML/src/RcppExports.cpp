// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_cal_Hes
NumericMatrix rcpp_cal_Hes(NumericVector XiM0, NumericMatrix Covariate, NumericVector parvec, int len, int XiM0_len);
RcppExport SEXP _LVHML_rcpp_cal_Hes(SEXP XiM0SEXP, SEXP CovariateSEXP, SEXP parvecSEXP, SEXP lenSEXP, SEXP XiM0_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type XiM0(XiM0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Covariate(CovariateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parvec(parvecSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type XiM0_len(XiM0_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_cal_Hes(XiM0, Covariate, parvec, len, XiM0_len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_cal_Hes_foru
NumericMatrix rcpp_cal_Hes_foru(NumericVector XiM0, NumericMatrix Covariate, NumericVector parvec, int len, int XiM0_len, NumericMatrix nonzero_ind);
RcppExport SEXP _LVHML_rcpp_cal_Hes_foru(SEXP XiM0SEXP, SEXP CovariateSEXP, SEXP parvecSEXP, SEXP lenSEXP, SEXP XiM0_lenSEXP, SEXP nonzero_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type XiM0(XiM0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Covariate(CovariateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parvec(parvecSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type XiM0_len(XiM0_lenSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nonzero_ind(nonzero_indSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_cal_Hes_foru(XiM0, Covariate, parvec, len, XiM0_len, nonzero_ind));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_cal_grad
NumericVector rcpp_cal_grad(NumericVector yvec, NumericVector XiM0, NumericMatrix Covariate, int len, int parlen);
RcppExport SEXP _LVHML_rcpp_cal_grad(SEXP yvecSEXP, SEXP XiM0SEXP, SEXP CovariateSEXP, SEXP lenSEXP, SEXP parlenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XiM0(XiM0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Covariate(CovariateSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type parlen(parlenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_cal_grad(yvec, XiM0, Covariate, len, parlen));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_objpar_prep
double rcpp_objpar_prep(NumericVector XiM, NumericVector yvec, int len);
RcppExport SEXP _LVHML_rcpp_objpar_prep(SEXP XiMSEXP, SEXP yvecSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type XiM(XiMSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_objpar_prep(XiM, yvec, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_xi_func
NumericVector rcpp_xi_func(NumericVector x);
RcppExport SEXP _LVHML_rcpp_xi_func(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_xi_func(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_objprep
double rcpp_objprep(LogicalMatrix Ymatlog, IntegerMatrix R, NumericMatrix tU, NumericMatrix Theta, NumericMatrix X, NumericMatrix Zmat, int N, int J, int px, int pz, int u_len, int K, int Tp, bool ext, bool gamma_fix);
RcppExport SEXP _LVHML_rcpp_objprep(SEXP YmatlogSEXP, SEXP RSEXP, SEXP tUSEXP, SEXP ThetaSEXP, SEXP XSEXP, SEXP ZmatSEXP, SEXP NSEXP, SEXP JSEXP, SEXP pxSEXP, SEXP pzSEXP, SEXP u_lenSEXP, SEXP KSEXP, SEXP TpSEXP, SEXP extSEXP, SEXP gamma_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type Ymatlog(YmatlogSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tU(tUSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Zmat(ZmatSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< int >::type pz(pzSEXP);
    Rcpp::traits::input_parameter< int >::type u_len(u_lenSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Tp(TpSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< bool >::type gamma_fix(gamma_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_objprep(Ymatlog, R, tU, Theta, X, Zmat, N, J, px, pz, u_len, K, Tp, ext, gamma_fix));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_getEforjEujXiM0
List rcpp_getEforjEujXiM0(NumericVector uj, IntegerVector indices_R, IntegerVector lengths_R, NumericMatrix Theta, NumericMatrix X, NumericMatrix Zmat, int N, int Tp, int K, int px, int pz, int ujlen, bool ext, bool gamma_fix);
RcppExport SEXP _LVHML_rcpp_getEforjEujXiM0(SEXP ujSEXP, SEXP indices_RSEXP, SEXP lengths_RSEXP, SEXP ThetaSEXP, SEXP XSEXP, SEXP ZmatSEXP, SEXP NSEXP, SEXP TpSEXP, SEXP KSEXP, SEXP pxSEXP, SEXP pzSEXP, SEXP ujlenSEXP, SEXP extSEXP, SEXP gamma_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type uj(ujSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indices_R(indices_RSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lengths_R(lengths_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Zmat(ZmatSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Tp(TpSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< int >::type pz(pzSEXP);
    Rcpp::traits::input_parameter< int >::type ujlen(ujlenSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< bool >::type gamma_fix(gamma_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_getEforjEujXiM0(uj, indices_R, lengths_R, Theta, X, Zmat, N, Tp, K, px, pz, ujlen, ext, gamma_fix));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_proj_func
List rcpp_proj_func(NumericVector out, int K, double proj_const);
RcppExport SEXP _LVHML_rcpp_proj_func(SEXP outSEXP, SEXP KSEXP, SEXP proj_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type proj_const(proj_constSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_proj_func(out, K, proj_const));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_getnewpar_func
List rcpp_getnewpar_func(NumericVector XiM0, NumericVector yvec, int len, NumericVector grad, NumericVector drt, NumericVector oldpar, NumericMatrix Covariates, NumericVector tooff, double proj_const);
RcppExport SEXP _LVHML_rcpp_getnewpar_func(SEXP XiM0SEXP, SEXP yvecSEXP, SEXP lenSEXP, SEXP gradSEXP, SEXP drtSEXP, SEXP oldparSEXP, SEXP CovariatesSEXP, SEXP tooffSEXP, SEXP proj_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type XiM0(XiM0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type drt(drtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type oldpar(oldparSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Covariates(CovariatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tooff(tooffSEXP);
    Rcpp::traits::input_parameter< double >::type proj_const(proj_constSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_getnewpar_func(XiM0, yvec, len, grad, drt, oldpar, Covariates, tooff, proj_const));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_getnewpar_func_foru
List rcpp_getnewpar_func_foru(NumericVector XiM0, NumericVector yvec, int len, NumericVector grad, NumericVector drt, NumericVector oldpar, NumericMatrix Covariates, NumericVector tooff, NumericMatrix nonzero_ind, double proj_const);
RcppExport SEXP _LVHML_rcpp_getnewpar_func_foru(SEXP XiM0SEXP, SEXP yvecSEXP, SEXP lenSEXP, SEXP gradSEXP, SEXP drtSEXP, SEXP oldparSEXP, SEXP CovariatesSEXP, SEXP tooffSEXP, SEXP nonzero_indSEXP, SEXP proj_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type XiM0(XiM0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type drt(drtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type oldpar(oldparSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Covariates(CovariatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tooff(tooffSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nonzero_ind(nonzero_indSEXP);
    Rcpp::traits::input_parameter< double >::type proj_const(proj_constSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_getnewpar_func_foru(XiM0, yvec, len, grad, drt, oldpar, Covariates, tooff, nonzero_ind, proj_const));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_BetagetEforj
List rcpp_BetagetEforj(IntegerVector indices_R, IntegerVector lengths_R, NumericMatrix X, NumericMatrix Zmat, int N, int Tp, int px, int pz, bool ext, bool gamma_fix);
RcppExport SEXP _LVHML_rcpp_BetagetEforj(SEXP indices_RSEXP, SEXP lengths_RSEXP, SEXP XSEXP, SEXP ZmatSEXP, SEXP NSEXP, SEXP TpSEXP, SEXP pxSEXP, SEXP pzSEXP, SEXP extSEXP, SEXP gamma_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type indices_R(indices_RSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lengths_R(lengths_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Zmat(ZmatSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Tp(TpSEXP);
    Rcpp::traits::input_parameter< int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< int >::type pz(pzSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< bool >::type gamma_fix(gamma_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_BetagetEforj(indices_R, lengths_R, X, Zmat, N, Tp, px, pz, ext, gamma_fix));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_BetaonlygetEforj
List rcpp_BetaonlygetEforj(IntegerVector indices_R, IntegerVector lengths_R, NumericMatrix X, int N, int Tp, int px, bool ext, bool gamma_fix);
RcppExport SEXP _LVHML_rcpp_BetaonlygetEforj(SEXP indices_RSEXP, SEXP lengths_RSEXP, SEXP XSEXP, SEXP NSEXP, SEXP TpSEXP, SEXP pxSEXP, SEXP extSEXP, SEXP gamma_fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type indices_R(indices_RSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lengths_R(lengths_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Tp(TpSEXP);
    Rcpp::traits::input_parameter< int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< bool >::type gamma_fix(gamma_fixSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_BetaonlygetEforj(indices_R, lengths_R, X, N, Tp, px, ext, gamma_fix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LVHML_rcpp_cal_Hes", (DL_FUNC) &_LVHML_rcpp_cal_Hes, 5},
    {"_LVHML_rcpp_cal_Hes_foru", (DL_FUNC) &_LVHML_rcpp_cal_Hes_foru, 6},
    {"_LVHML_rcpp_cal_grad", (DL_FUNC) &_LVHML_rcpp_cal_grad, 5},
    {"_LVHML_rcpp_objpar_prep", (DL_FUNC) &_LVHML_rcpp_objpar_prep, 3},
    {"_LVHML_rcpp_xi_func", (DL_FUNC) &_LVHML_rcpp_xi_func, 1},
    {"_LVHML_rcpp_objprep", (DL_FUNC) &_LVHML_rcpp_objprep, 15},
    {"_LVHML_rcpp_getEforjEujXiM0", (DL_FUNC) &_LVHML_rcpp_getEforjEujXiM0, 14},
    {"_LVHML_rcpp_proj_func", (DL_FUNC) &_LVHML_rcpp_proj_func, 3},
    {"_LVHML_rcpp_getnewpar_func", (DL_FUNC) &_LVHML_rcpp_getnewpar_func, 9},
    {"_LVHML_rcpp_getnewpar_func_foru", (DL_FUNC) &_LVHML_rcpp_getnewpar_func_foru, 10},
    {"_LVHML_rcpp_BetagetEforj", (DL_FUNC) &_LVHML_rcpp_BetagetEforj, 10},
    {"_LVHML_rcpp_BetaonlygetEforj", (DL_FUNC) &_LVHML_rcpp_BetaonlygetEforj, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_LVHML(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
